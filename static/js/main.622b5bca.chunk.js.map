{"version":3,"sources":["store/counter-reducer.ts","components/Button.tsx","components/Scoreboard.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["actions","Button","props","disabled","disable","onClick","callBack","title","Scoreboard","classes","score","maxValue","className","setMin","value","type","SET_MIN","initial","min","max","getFromLocal","dispatch","state","localStorage","getItem","SET_STATE","setState","JSON","parse","App","useDispatch","useEffect","useSelector","counter","INCREASE_VALUE","size","name","onChange","e","currentTarget","htmlFor","autoFocus","SET_MAX","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","newScore","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622b5bca.chunk.js","sourcesContent":["\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport interface counterStateType {\r\n    min: number\r\n    max: number\r\n    score: number\r\n}\r\n\r\n\r\nenum actions {\r\n    SET_MIN = \"SET_MIN\",\r\n    SET_MAX = \"SET_MAX\",\r\n    INCREASE_VALUE = \"INCREASE_VALUE\",\r\n    SET_STATE =  \"SET_STATE\",\r\n}\r\n\r\nexport type counterActionType = setMinType | setMaxType | increaseValueType | setStateType\r\n\r\n\r\nexport const setMin = (value: number) => {\r\n    return {type: actions.SET_MIN, value} as const\r\n}\r\nexport type setMinType = ReturnType<typeof setMin>\r\n\r\nexport const setMax = (value:number) => {\r\n    return {type: actions.SET_MAX, value} as const\r\n}\r\nexport type setMaxType = ReturnType<typeof setMax>\r\n\r\nexport const increaseValue = () => {\r\n    return {type: actions.INCREASE_VALUE} as const\r\n}\r\nexport type increaseValueType = ReturnType<typeof increaseValue>\r\n\r\nexport const setState = (state: counterStateType) => {\r\n    return {type: actions.SET_STATE, state} as const\r\n}\r\nexport type setStateType = ReturnType<typeof setState>\r\n\r\nconst initial: counterStateType = {\r\n    min: 0,\r\n    max: 5,\r\n    score: 0,\r\n}\r\n\r\n\r\nexport const counterReducer = (state = initial, action: counterActionType) => {\r\n    switch (action.type) {\r\n        case actions.SET_MIN: {\r\n            if(action.value > state.max) {\r\n                return state\r\n            }\r\n            if (action.value > state.score) {\r\n                return {...state, min: action.value, score: action.value}\r\n            }\r\n            return {...state, min: action.value}\r\n        }\r\n        case actions.SET_MAX: {\r\n            if(action.value < state.min) {\r\n                return state\r\n            }\r\n            if (action.value < state.score) {\r\n            return {...state, max: action.value, score: action.value}\r\n            }\r\n            return {...state, max: action.value}\r\n        }\r\n        case actions.INCREASE_VALUE: {\r\n            const newScore = state.score + 1\r\n            if (newScore > state.max) {\r\n                return state\r\n            }\r\n            return {...state, score: newScore}\r\n        }\r\n        case actions.SET_STATE: {\r\n        return action.state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setToLocal = (state: counterStateType) => (dispatch: Dispatch)  => {\r\nlocalStorage.setItem(\"state\", JSON.stringify(state))\r\n\r\n}\r\n\r\nexport const getFromLocal = () => (dispatch: Dispatch)  => {\r\n    const state = localStorage.getItem(\"state\")\r\n        state && dispatch(setState(JSON.parse(state)))\r\n}\r\n","import React from 'react'\r\n\r\ntype propsType = {\r\n    callBack?: () => void\r\n    title?: string\r\n    disable?: boolean\r\n}\r\n\r\nexport const Button = (props: propsType) => {\r\n\r\n    return (\r\n        <button disabled={props.disable} onClick={props.callBack}>{props.title} </button>)\r\n}","import React from 'react';\r\n\r\ntype propsTypes = {\r\n    score: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Scoreboard = (props: propsTypes) => {\r\n    let classes = 'scoreboard'\r\n    if (props.score >= props.maxValue) {\r\n        classes = 'scoreboard red'\r\n    }\r\n\r\n    return (\r\n        <div className={classes}>{props.score}</div>\r\n    );\r\n};","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from \"./components/Button\";\nimport {Scoreboard} from \"./components/Scoreboard\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getFromLocal, increaseValue, setMax, setMin, setToLocal} from \"./store/counter-reducer\";\nimport {rootState} from \"./store/store\";\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getFromLocal())\n    }, [])\n    const {score, min, max} = useSelector((state: rootState) => state.counter)\n\n    const setScore = (value: number) => dispatch(setMin(value))\n\n    const increaseHandler = () => {\n        dispatch(increaseValue())\n    }\n\n    const resetHandler = () => {\n        setScore(min)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"container\">\n                    <Scoreboard maxValue={max} score={score}/>\n                    <div className=\"button-container\">\n                        <Button disable={score >= max} callBack={increaseHandler} title={'inc'}/>\n                        <Button disable={score <= min} callBack={resetHandler} title={'reset'}/>\n                    </div>\n                    <div className=\"button-container input\">\n                        <input type=\"number\" size={2} name=\"minValue\" onChange={(e) => {\n                            dispatch(setMin(+e.currentTarget.value))\n                        }} value={min}/>\n                        <label htmlFor=\"minValue\">min</label>\n\n                        <input autoFocus type=\"number\" size={2} name=\"maxValue\" onChange={(e) => {\n                            dispatch(setMax(+e.currentTarget.value))\n                        }} value={max}/>\n                        <label htmlFor=\"maxValue\">max</label>\n                    </div>\n                    <Button callBack={() => dispatch(setToLocal({score, min, max})) } title={\"set\"} disable={false}/>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer, counterStateType} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport interface rootState {\r\n    counter: counterStateType\r\n}\r\n\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport const store = createStore(reducers, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n\n\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}