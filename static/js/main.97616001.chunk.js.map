{"version":3,"sources":["store/counter-reducer.ts","components/Button.tsx","components/Scoreboard.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["actions","Button","props","disabled","disable","onClick","callBack","title","Scoreboard","classes","score","maxValue","className","initial","min","max","getFromLocal","dispatch","state","localStorage","getItem","type","SET_STATE","setState","JSON","parse","App","useDispatch","useEffect","useSelector","counter","handleFocus","event","currentTarget","select","INCREASE_VALUE","size","name","onChange","e","value","SET_MIN","htmlFor","SET_MAX","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","newScore","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97616001.chunk.js","sourcesContent":["\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport interface counterStateType {\r\n    min: number\r\n    max: number\r\n    score: number\r\n}\r\n\r\nenum actions {\r\n    SET_MIN = \"SET_MIN\",\r\n    SET_MAX = \"SET_MAX\",\r\n    INCREASE_VALUE = \"INCREASE_VALUE\",\r\n    SET_STATE =  \"SET_STATE\",\r\n}\r\n\r\nexport type counterActionType = setMinType | setMaxType | increaseValueType | setStateType\r\n\r\n\r\nexport const setMin = (value: number) => {\r\n    return {type: actions.SET_MIN, value} as const\r\n}\r\nexport type setMinType = ReturnType<typeof setMin>\r\n\r\nexport const setMax = (value:number) => {\r\n    return {type: actions.SET_MAX, value} as const\r\n}\r\nexport type setMaxType = ReturnType<typeof setMax>\r\n\r\nexport const increaseValue = () => {\r\n    return {type: actions.INCREASE_VALUE} as const\r\n}\r\nexport type increaseValueType = ReturnType<typeof increaseValue>\r\n\r\nexport const setState = (state: counterStateType) => {\r\n    return {type: actions.SET_STATE, state} as const\r\n}\r\nexport type setStateType = ReturnType<typeof setState>\r\n\r\nconst initial: counterStateType = {\r\n    min: 0,\r\n    max: 5,\r\n    score: 0,\r\n}\r\n\r\n\r\nexport const counterReducer = (state = initial, action: counterActionType) => {\r\n    switch (action.type) {\r\n        case actions.SET_MIN: {\r\n            if(action.value > state.max) {\r\n                return state\r\n            }\r\n            if (action.value > state.score) {\r\n                return {...state, min: action.value, score: action.value}\r\n            }\r\n            return {...state, min: action.value}\r\n        }\r\n        case actions.SET_MAX: {\r\n            if(action.value < state.min) {\r\n                return state\r\n            }\r\n            if (action.value < state.score) {\r\n            return {...state, max: action.value, score: action.value}\r\n            }\r\n            return {...state, max: action.value}\r\n        }\r\n        case actions.INCREASE_VALUE: {\r\n            const newScore = state.score + 1\r\n            if (newScore > state.max) {\r\n                return state\r\n            }\r\n            return {...state, score: newScore}\r\n        }\r\n        case actions.SET_STATE: {\r\n        return action.state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setToLocal = (state: counterStateType) => (dispatch: Dispatch)  => {\r\nlocalStorage.setItem(\"state\", JSON.stringify(state))\r\n\r\n}\r\n\r\nexport const getFromLocal = () => (dispatch: Dispatch)  => {\r\n    const state = localStorage.getItem(\"state\")\r\n        state && dispatch(setState(JSON.parse(state)))\r\n}\r\n","import React from 'react'\r\n\r\ntype propsType = {\r\n    callBack?: () => void\r\n    title?: string\r\n    disable?: boolean\r\n}\r\n\r\nexport const Button = (props: propsType) => {\r\n\r\n    return (\r\n        <button disabled={props.disable} onClick={props.callBack}>{props.title} </button>)\r\n}","import React from 'react';\r\n\r\ntype propsTypes = {\r\n    score: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Scoreboard = (props: propsTypes) => {\r\n    let classes = 'scoreboard'\r\n    if (props.score >= props.maxValue) {\r\n        classes = 'scoreboard red'\r\n    }\r\n\r\n    return (\r\n        <div className={classes}>{props.score}</div>\r\n    );\r\n};","import React, {MouseEventHandler, useEffect} from 'react';\nimport './App.css';\nimport {Button} from \"./components/Button\";\nimport {Scoreboard} from \"./components/Scoreboard\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getFromLocal, increaseValue, setMax, setMin, setToLocal} from \"./store/counter-reducer\";\nimport {rootState} from \"./store/store\";\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getFromLocal())\n    }, [])\n    const {score, min, max} = useSelector((state: rootState) => state.counter)\n\n\n    const increaseHandler = () => {\n        dispatch(increaseValue())\n    }\n\n    const resetHandler = () => {\n        dispatch(getFromLocal())\n    }\n\n    const handleFocus = (event: React.SyntheticEvent<HTMLInputElement>) => event.currentTarget.select();\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"container\">\n                    <Scoreboard maxValue={max} score={score}/>\n                    <div className=\"button-container\">\n                        <Button disable={score >= max} callBack={increaseHandler} title={'inc'}/>\n                        <Button callBack={resetHandler} title={'reset'}/>\n                    </div>\n                    <div className=\"button-container input\">\n                        <input onClick={handleFocus} type=\"number\" size={2} name=\"minValue\" onChange={(e) => {\n                            dispatch(setMin(+e.currentTarget.value))\n                        }} value={min}/>\n                        <label htmlFor=\"minValue\">min</label>\n\n                        <input onClick={handleFocus} type=\"number\" size={2} name=\"maxValue\" onChange={(e) => {\n                            dispatch(setMax(+e.currentTarget.value))\n                        }} value={max}/>\n                        <label htmlFor=\"maxValue\">max</label>\n                    </div>\n                    <Button callBack={() => dispatch(setToLocal({score, min, max}))} title={\"set\"} disable={false}/>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer, counterStateType} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport interface rootState {\r\n    counter: counterStateType\r\n}\r\n\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport const store = createStore(reducers, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n\n\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}